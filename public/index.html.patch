<input type="text" id="title" placeholder="Title" required />
  <textarea id="content" placeholder="Content" rows="4" required></textarea>
  <button type="submit">Add Note</button>
</form>
=======
<form id="addNoteForm">
  <input type="text" id="title" placeholder="Title" required />
  <textarea id="content" placeholder="Content" rows="4" required></textarea>
  <button type="submit" id="submitBtn">Add Note</button>
  <button type="button" id="cancelEditBtn" style="display:none; margin-left: 0.5rem;">Cancel Edit</button>
</form>
>>>>>>> REPLACE
```

```
<<<<<<< SEARCH
function renderNotes(notes) {
  const notesList = document.getElementById('notesList');
  notesList.innerHTML = '';
  notes.forEach(note => {
    const li = document.createElement('li');
    li.innerHTML = `
      <div class="note-title">${note.title}</div>
      <div class="note-content">${note.content}</div>
      <div class="note-actions">
        <button onclick="handleDelete('${note.id}')">Delete</button>
      </div>
    `;
    notesList.appendChild(li);
  });
}
=======
function renderNotes(notes) {
  const notesList = document.getElementById('notesList');
  notesList.innerHTML = '';
  notes.forEach(note => {
    const li = document.createElement('li');
    li.innerHTML = `
      <div class="note-title">${note.title}</div>
      <div class="note-content">${note.content}</div>
      <div class="note-actions">
        <button onclick="handleEdit('${note.id}')">Edit</button>
        <button onclick="handleDelete('${note.id}')">Delete</button>
      </div>
    `;
    notesList.appendChild(li);
  });
}
>>>>>>> REPLACE
```

```
<<<<<<< SEARCH
const apiBase = '/notes';

async function fetchNotes() {
  const res = await fetch(apiBase);
  if (!res.ok) {
    alert('Failed to fetch notes');
    return [];
  }
  return await res.json();
}

async function addNote(title, content) {
  const res = await fetch(apiBase, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ title, content })
  });
  if (!res.ok) {
    alert('Failed to add note');
    return null;
  }
  return await res.json();
}

async function deleteNote(id) {
  const res = await fetch(`${apiBase}/${id}`, {
    method: 'DELETE'
  });
  if (!res.ok) {
    alert('Failed to delete note');
    return false;
  }
  return true;
}

function renderNotes(notes) {
  const notesList = document.getElementById('notesList');
  notesList.innerHTML = '';
  notes.forEach(note => {
    const li = document.createElement('li');
    li.innerHTML = `
      <div class="note-title">${note.title}</div>
      <div class="note-content">${note.content}</div>
      <div class="note-actions">
        <button onclick="handleDelete('${note.id}')">Delete</button>
      </div>
    `;
    notesList.appendChild(li);
  });
}

async function loadNotes() {
  const notes = await fetchNotes();
  renderNotes(notes);
}

async function handleAddNote(event) {
  event.preventDefault();
  const title = document.getElementById('title').value.trim();
  const content = document.getElementById('content').value.trim();
  if (!title || !content) {
    alert('Title and content are required');
    return;
  }
  const newNote = await addNote(title, content);
  if (newNote) {
    document.getElementById('addNoteForm').reset();
    loadNotes();
  }
}

document.getElementById('addNoteForm').addEventListener('submit', handleAddNote);

loadNotes();
=======
const apiBase = '/notes';

let editNoteId = null;

async function fetchNotes() {
  const res = await fetch(apiBase);
  if (!res.ok) {
    alert('Failed to fetch notes');
    return [];
  }
  return await res.json();
}

async function addNote(title, content) {
  const res = await fetch(apiBase, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ title, content })
  });
  if (!res.ok) {
    alert('Failed to add note');
    return null;
  }
  return await res.json();
}

async function updateNote(id, title, content) {
  const res = await fetch(`${apiBase}/${id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ title, content })
  });
  if (!res.ok) {
    alert('Failed to update note');
    return null;
  }
  return await res.json();
}

async function deleteNote(id) {
  const res = await fetch(`${apiBase}/${id}`, {
    method: 'DELETE'
  });
  if (!res.ok) {
    alert('Failed to delete note');
    return false;
  }
  return true;
}

function renderNotes(notes) {
  const notesList = document.getElementById('notesList');
  notesList.innerHTML = '';
  notes.forEach(note => {
    const li = document.createElement('li');
    li.innerHTML = `
      <div class="note-title">${note.title}</div>
      <div class="note-content">${note.content}</div>
      <div class="note-actions">
        <button onclick="handleEdit('${note.id}')">Edit</button>
        <button onclick="handleDelete('${note.id}')">Delete</button>
      </div>
    `;
    notesList.appendChild(li);
  });
}

async function loadNotes() {
  const notes = await fetchNotes();
  renderNotes(notes);
}

async function handleAddNote(event) {
  event.preventDefault();
  const title = document.getElementById('title').value.trim();
  const content = document.getElementById('content').value.trim();
  if (!title || !content) {
    alert('Title and content are required');
    return;
  }
  if (editNoteId) {
    // Update existing note
    const updatedNote = await updateNote(editNoteId, title, content);
    if (updatedNote) {
      resetForm();
      loadNotes();
    }
  } else {
    // Add new note
    const newNote = await addNote(title, content);
    if (newNote) {
      resetForm();
      loadNotes();
    }
  }
}

function resetForm() {
  editNoteId = null;
  document.getElementById('addNoteForm').reset();
  document.getElementById('submitBtn').textContent = 'Add Note';
  document.getElementById('cancelEditBtn').style.display = 'none';
}

function handleEdit(id) {
  fetch(`${apiBase}/${id}`)
    .then(res => {
      if (!res.ok) throw new Error('Note not found');
      return res.json();
    })
    .then(note => {
      editNoteId = note.id;
      document.getElementById('title').value = note.title;
      document.getElementById('content').value = note.content;
      document.getElementById('submitBtn').textContent = 'Update Note';
      document.getElementById('cancelEditBtn').style.display = 'inline-block';
    })
    .catch(err => {
      alert(err.message);
    });
}

function handleCancelEdit() {
  resetForm();
}

async function handleDelete(id) {
  if (confirm('Are you sure you want to delete this note?')) {
    const success = await deleteNote(id);
    if (success) {
      if (editNoteId === id) {
        resetForm();
      }
      loadNotes();
    }
  }
}

document.getElementById('addNoteForm').addEventListener('submit', handleAddNote);
document.getElementById('cancelEditBtn').addEventListener('click', handleCancelEdit);

loadNotes();
